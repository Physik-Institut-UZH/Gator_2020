TH1F* histogen(const string& filename){
//This definition of histogen() is only for files like "sample.dat" that doesn't contain the acquisition time.
//Opening the ASCII file

cout << "Opening the ASCII file" << endl;
ifstream datafile;
datafile.open(filename.c_str());

//ofstream outf("Control.txt"); //Only to debug code

Int_t nlines = 0;
string dataline, str_counts;
Double_t counts;

cout << "Entering in the 1st loop" << endl;
while(!datafile.eof()) {
	getline(datafile,dataline);
	//if(nlines<100){
	//outf << dataline << endl;
	//}
	nlines++;
}
datafile.close(); //Used because I don't know how to reset the flags. I'll open the file again.

//outf.close();
//From here the variable nlines contains the number of processed lines

cout << "Num of lines = " << nlines << "\n" << endl;

cout << "Creating THF1 object" << endl;
TH1F* histo = new TH1F("Raw histo",filename.c_str(),nlines,1,nlines); 

datafile.open(filename.c_str());
nlines=0;

cout << "Entering in the 2nd loop\n" << endl;

while (!datafile.eof()){
   //cout <<"Start loop num: " << nlines << "\n" << endl; //Only for debug.
   getline(datafile,dataline);
   if(nlines==0) {
   	histo->SetBinContent(0,0); //0 is the index of the underflow bin, which I set to 0 for safety   
   }

   str_counts = dataline.substr(dataline.find_first_of("\t")+1); // I want to get only the second column, 
                                                                 // in which are the counts for each channel.
                                                                 // This values are after the TAB character.
   counts = atof(str_counts.c_str()); // Converts the counts from char to float.
   /*if(nlines!=0  && nlines < 15){
   cout << "Line: " << nlines << "\t" << "Counts = " << counts << "\n" << endl; //Just to debug
   }*/
   histo->SetBinContent(nlines,counts); //Fill each bin with the correnponding counts rate
   nlines++;

}


histo->SetBinContent(nlines+1,0); //nlines+1 now is the index of the overflow bin, which I set to 0 for safety

cout << "Num of processed lines= " << nlines << "\n" << endl;
datafile.close();

histo->Draw();

return(histo);

}


TH1F* histogen(const string& filename, Double_t& time){

//Opening the ASCII file

cout << "Opening the ASCII file" << endl;
ifstream datafile;
datafile.open(filename.c_str());

//ofstream outf("Control.txt"); //Only to debug code

Int_t nlines = 0;
string dataline, str_counts;
Double_t counts;

cout << "Entering in the 1st loop" << endl;
while(!datafile.eof()) {
getline(datafile,dataline);
/*if(nlines<100){
cout << dataline << endl;
}*/
nlines++;
}
//From here the variable nlines contains the number of processed lines
datafile.close(); //Used because I don't know how to reset the flags. I'll open the file again.
cout << "Num of lines = " << nlines << "\n" << endl;

//cout << "Creating THF1 object" << endl;

TH1F* histo = new TH1F("Raw histo",filename.c_str(),nlines-1,1,nlines-1); //nlines take into account also the first line which is the data acquisition time

datafile.open(filename.c_str());
nlines=0;

cout << "Entering in the 2nd loop\n" << endl;

while (!datafile.eof()){
   //cout <<"Start loop num: " << nlines << "\n" << endl; //Only for debug.
   getline(datafile,dataline);
   if(nlines==0) {
   time = atof(dataline.c_str());
   cout << "Time of acquisition = " << time << " secs\n" << endl;
   histo->SetBinContent(0,0); //0 is the index of the underflow bin, which I set to 0 for safety   
   }

   str_counts = dataline.substr(dataline.find_first_of("\t")+1); // I want to get only the second column, 
                                                                 // in which are the counts for each channel.
                                                                 // This values are after the TAB character.
   counts = atof(str_counts.c_str()); // Converts the counts from char to float.
   /*if(nlines!=0  && nlines < 15){
   cout << "Line: " << nlines << "\t" << "Counts = " << counts << "\n" << endl; //Just to debug
   }*/
   histo->SetBinContent(nlines,counts); //Fill each bin with the correnponding counts rate
   nlines++;

}


histo->SetBinContent(nlines,0); //nlines now is the index of the overflow bin, which I set to 0 for safety

cout << "Num of processed lines= " << nlines-1 << "\n" << endl;
datafile.close();

histo->Draw();

return(histo);

}


////////////////////////////////////////////////
// The following functions come from Giovanni //
////////////////////////////////////////////////

TSpectrum * FindPeak( TH1D *hdev, int nPeaks ){
    Int_t maxNPeaks = 1000; // Maximum number of peaks
    Float_t resolution = 1.; // Determines resolution of the neighboring peaks 
    // default value is 1 correspond to 3 sigma distance 
    // between peaks. Higher values allow higher resolution
    // (smaller distance between peaks.
    // May be set later through SetResolution. 
    TSpectrum *first_cal_peaks = new TSpectrum( maxNPeaks, resolution );
    double sigma = 1.;
    double threshold = 0.5;
    first_cal_peaks->Search( hdev, sigma, "goff", threshold );
    
    int size = first_cal_peaks->GetNPeaks();
    int iterations = 1;
    double increment = 0.03;
    double decrement = 0.02;
    
    while( size != nPeaks ){
      if( size > nPeaks && threshold < ( 1- increment ) ){
	threshold += increment;
	first_cal_peaks->Search( hdev, sigma, "goff", threshold );
      }else if( size < nPeaks && threshold > decrement){
	threshold -= decrement;
	first_cal_peaks->Search( hdev, sigma, "goff", threshold );
      }else{
	increment /= 2.;
	decrement /=2.;
      }
      iterations ++;
      size = first_cal_peaks->GetNPeaks();
      if( iterations > 100 ){
	return 0;
      }
    }

    return first_cal_peaks;
}


TFitResultPtr Calibrate( vector<double> *peaks,
			 vector<double> *peaks_error,
			 vector<double> *literature,
			 vector<double> *literature_error,
			 TF1 * fit_func,
			 TFile *rootout ){

  int nPeaks = peaks->size();

  TGraphErrors *position_graph = new TGraphErrors( nPeaks,
		      &(peaks->at(0)),
		      &(literature->at(0)),
		      &(peaks_error->at(0)),
		      &(literature_error->at(0)) );

  TFitResultPtr fitresult = position_graph->Fit(fit_func->GetName(),"N");

  rootout->cd();
  fit_func->Write();
    
  return fitresult;
}

// Plot calibration
void Draw_Calibration( vector<double> *peaks,
		       vector<double> *peaks_error,
		       vector<double> *literature,
		       vector<double> *literature_error,
		       TF1 * fit_func,
		       string *outpath_string,
		       string *outfile_name,
		       TFile *file ){

  TCanvas *canvas = new TCanvas();
  canvas->cd();
  gPad->SetFillColor(10);

  int nPeaks = peaks->size();
  TGraphErrors *position_graph = 
    new TGraphErrors( nPeaks,
		      &(peaks->at(0)),
		      &(literature->at(0)),
		      &(peaks_error->at(0)),
		      &(literature_error->at(0)) );

  if( fit_func->GetParameter(2) == 0. ){
    position_graph->SetTitle("Linear Calibration");
  }else{
    position_graph->SetTitle("Quadratic Calibration");
  }
  position_graph->SetName( outfile_name->c_str() );

  position_graph->GetXaxis()->SetTitle("Uncalibrated Energy");
  position_graph->GetYaxis()->SetTitle("LiteratureEnergy [keV]");

  position_graph->SetMarkerStyle(21);
  position_graph->SetMarkerColor(kBlue);

  position_graph->Draw("AP");

  fit_func->SetLineColor(2);
  fit_func->SetLineWidth(1);
  position_graph->Fit(fit_func->GetName(),"Q");
  fit_func->Draw("same");
  
  string *outfile_string = new string( outpath_string->c_str() );
  outfile_string->append( outfile_name->c_str() );
  outfile_string->append(".png");
  canvas->Print( outfile_string->c_str() );
  
  file->cd();
  position_graph->Write();

  return;  
}

// Calculate calibration residuals
void Residuals( vector<double> *peaks,
		vector<double> *peaks_error,
		vector<double> *literature,
		vector<double> *literature_error,
		vector<double> *diff,
		vector<double> *diff_error ){

  int nPeaks = peaks->size();
  for( int i=0; i<nPeaks; i++ ){
    diff->push_back( peaks->at(i) - literature->at(i) );
    diff_error->push_back( sqrt( pow(peaks_error->at(i), 2. ) + 
				 pow( literature_error->at(i), 2. ) ) );
  }

  return;
}

// Plot calibration residuals
void Draw_Calibration_Deviation( vector<double> *diff,
				   vector<double> *diff_error,
				   vector<double> *literature,
				   vector<double> *literature_error,
				   string *outpath_string,
				 string *outfile_name,
				 string *title,
				 TFile *file ){

  TCanvas *canvas = new TCanvas();
  canvas->cd();
  gPad->SetFillColor(10);

  int nPeaks = diff->size();
  TGraphErrors *diff_graph = 
    new TGraphErrors( nPeaks, 
		      &( literature->at(0) ),
		      &( diff->at(0) ),
		      &( literature_error->at(0) ),
		      &( diff_error->at(0) ) );
  diff_graph->SetTitle( title->c_str() );
  diff_graph->SetName( outfile_name->c_str() );
  diff_graph->GetXaxis()->SetTitle("Energy [keV]");
  diff_graph->GetYaxis()->SetTitle("Deviation [keV]");

  diff_graph->SetMarkerStyle(21);
  diff_graph->SetMarkerColor(kBlue);

  diff_graph->Draw("AP");

  string *func_name = new string( "" );
  func_name->append( outfile_name->c_str() );
  func_name->append( "_func" );
  TF1 *p0 = new TF1( func_name->c_str(), "pol0" );
  p0->SetLineColor(2);
  p0->SetLineWidth(2);
  TFitResultPtr fitresult = diff_graph->Fit(p0);
  string *fitresult_name = new string("");
  fitresult_name->append( outfile_name->c_str() );
  fitresult_name->append( "_fitresult" );
  fitresult->SetName( fitresult_name->c_str() );

  string *outfile_string = new string( outpath_string->c_str() );
  outfile_string->append( outfile_name->c_str() );
  outfile_string->append(".png");
  canvas->Print( outfile_string->c_str() );

  outfile_string = new string( outpath_string->c_str() );
  outfile_string->append( outfile_name->c_str() );
  outfile_string->append(".txt");
  ofstream printResults( outfile_string->c_str() );
  printResults << p0->GetParameter(0) << "\t" << p0->GetParError(0) << endl; 
  printResults << p0->GetChisquare() << "\t" << p0->GetNDF() << endl;

  file->cd();
  diff_graph->Write();
  p0->Write();
 //fitresult->Write();

  return;
}

