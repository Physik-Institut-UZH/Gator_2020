// Dimensions

// Marinelli beaker

// Set visibility properties for the components of the sample
G4VisAttributes* sample_vis_orange = new G4VisAttributes(orange);
sample_vis_orange -> SetVisibility(true);
sample_vis_orange -> SetForceSolid(false);

//Dimensions of the sample components and definition of the geometry
 G4double thickness_wall = 2.7*mm;
 
 G4double tubs_cylinder_inner_Ri = 105.5*mm/2;
 G4double tubs_cylinder_inner_Ro = tubs_cylinder_inner_Ri + thickness_wall;
 G4double tubs_cylinder_inner_z  = 100*mm + thickness_wall;
 
 G4double tubs_disk_inner_Ro = tubs_cylinder_inner_Ro;
 G4double tubs_disk_inner_Ri = 0.0*mm/2;
 G4double tubs_disk_inner_z  = thickness_wall;
 
 G4double tubs_cylinder_outer_Ro = 200*mm/2;
 G4double tubs_cylinder_outer_Ri = tubs_cylinder_outer_Ro - thickness_wall;
 G4double tubs_cylinder_outer_z  = 175*mm;
 
 G4double tubs_disk_outer_Ro = tubs_cylinder_outer_Ro;
 G4double tubs_disk_outer_Ri = tubs_cylinder_inner_Ri;
 G4double tubs_disk_outer_z  = thickness_wall;

 G4Tubs* tubs_cylinder_inner= new G4Tubs("tubs_cylinder_inner", tubs_cylinder_inner_Ri, tubs_cylinder_inner_Ro, 0.5*tubs_cylinder_inner_z, 0.*deg, 360.*deg);
 G4Tubs* tubs_cylinder_outer= new G4Tubs("tubs_cylinder_outer", tubs_cylinder_outer_Ri, tubs_cylinder_outer_Ro, 0.5*tubs_cylinder_outer_z, 0.*deg, 360.*deg);
 G4Tubs* tubs_disk_inner= new G4Tubs("tubs_disk_inner", tubs_disk_inner_Ri, tubs_disk_inner_Ro, 0.5*tubs_disk_inner_z, 0.*deg, 360.*deg);
 G4Tubs* tubs_disk_outer= new G4Tubs("tubs_disk_outer", tubs_disk_outer_Ri, tubs_disk_outer_Ro, 0.5*tubs_disk_outer_z, 0.*deg, 360.*deg);
 
 G4UnionSolid* marinelli_beaker = new G4UnionSolid("marinelli_beaker", tubs_disk_inner, tubs_cylinder_inner, 0, G4ThreeVector(0*mm, 0*mm, tubs_disk_inner_z/2 - tubs_cylinder_inner_z/2));
 marinelli_beaker = new G4UnionSolid("marinelli_beaker", marinelli_beaker, tubs_disk_outer, 0, G4ThreeVector(0*mm, 0*mm, tubs_disk_inner_z/2 - tubs_cylinder_inner_z + tubs_disk_outer_z/2));
 marinelli_beaker = new G4UnionSolid("marinelli_beaker", marinelli_beaker, tubs_cylinder_outer, 0, G4ThreeVector(0*mm, 0*mm, tubs_disk_inner_z/2 - tubs_cylinder_inner_z + tubs_cylinder_outer_z/2));
 
//Construct the logical volume
  G4Material* Polypropylene = new G4Material(name="Polypropylene", density = 0.87*g/cm3, ncomponents = 2);
        Polypropylene->AddElement(C,3);
        Polypropylene->AddElement(H,6);

 marinelli_beaker_log = new G4LogicalVolume(marinelli_beaker, Polypropylene, "marinelli_beaker_log");
 
// Set visibility for the sample components
marinelli_beaker_log -> SetVisAttributes(sample_vis_orange);

// Set coordinates for the position of the sample at the top of the detector
G4double marinelli_beaker_Pos_x = 0*mm;
G4double marinelli_beaker_Pos_y = 0*mm;
G4double marinelli_beaker_Pos_z = endcapPos_z + 0.5*endcapHeight1 + 0.5*tubs_disk_inner_z + 1*0.01*mm;
G4ThreeVector marinelli_beaker_Pos(marinelli_beaker_Pos_x, marinelli_beaker_Pos_y, marinelli_beaker_Pos_z);

// Define the physical volumes
marinelli_beaker_phys = new  G4PVPlacement(0, marinelli_beaker_Pos, marinelli_beaker_log, "marinelli_beaker_phys", cavity1_log, false, 0, true);

// Rock dimensions

G4double height_1 = 49.5*mm; // get the correct value from Florian/Alex; measure it before in any case
G4double height_2 = 52*mm;

G4double diameter = 82*mm; // same as above; measure it!

// Granite
G4Element* Zr = new G4Element("Zirconium", "Zr", 40., 91.22*g/mole); // package does not have Zr 

G4Material* Granite = new G4Material(name = "Granite", density = 2.606*g/cm3, ncomponents = 12);
	Granite->AddElement(O, fractionmass=0.478309);
	Granite->AddElement(Si, fractionmass=0.330840);
	Granite->AddElement(Al, fractionmass=0.066851);
	Granite->AddElement(K, fractionmass=0.053090);
	Granite->AddElement(Fe, fractionmass=0.028897);
	Granite->AddElement(Ca, fractionmass=0.014330);
	Granite->AddElement(Na, fractionmass=0.013862);
	Granite->AddElement(Mg, fractionmass=0.006278);
	Granite->AddElement(Zr, fractionmass=0.004977);
	Granite->AddElement(P, fractionmass=0.001843);
	Granite->AddElement(F, fractionmass=0.000377);
	Granite->AddElement(H, fractionmass=0.000347);


G4Tubs* Granite_rock_1 = new G4Tubs(name = "Granite_rock_1", 0*mm, diameter/2, height_1/2, 0*deg, 360*deg);

G4Tubs* Granite_rock_2 = new G4Tubs(name = "Granite_rock_2", 0*mm, diameter/2, height_2/2, 0*deg, 360*deg);

// Logical Volumes

G4LogicalVolume* Granite_rock_1_log = new G4LogicalVolume(Granite_rock_1, Granite, "Granite_rock_1_log");

G4LogicalVolume* Granite_rock_2_log = new G4LogicalVolume(Granite_rock_2, Granite, "Granite_rock_2_log");

// Physical Volumes: to be amended after the sample is placed in Gator

G4double Granite_rock_1_x = 0*mm;
G4double Granite_rock_1_y = diameter/2 + 2*0.01*mm;
G4double Granite_rock_1_z = endcapPos_z + 0.5*endcapHeight1 + tubs_disk_inner_z + height_1/2 + 2*0.01*mm;

G4double Granite_rock_2_x = 0*mm;
G4double Granite_rock_2_y = -diameter/2 - 2*0.01*mm;
G4double Granite_rock_2_z = endcapPos_z + 0.5*endcapHeight1 + tubs_disk_inner_z + height_2/2 + 2*0.01*mm;

G4ThreeVector Granite_rock_1_pos(Granite_rock_1_x, Granite_rock_1_y, Granite_rock_1_z);
G4ThreeVector Granite_rock_2_pos(Granite_rock_2_x, Granite_rock_2_y, Granite_rock_2_z);

// Define the physical volumes
Granite_rock_1_phys = new G4PVPlacement(0, Granite_rock_1_pos, Granite_rock_1_log, "Granite_rock_1_phys", cavity1_log, false, 0, true);
Granite_rock_2_phys = new G4PVPlacement(0, Granite_rock_2_pos, Granite_rock_2_log, "Granite_rock_2_phys", cavity1_log, false, 0, true);